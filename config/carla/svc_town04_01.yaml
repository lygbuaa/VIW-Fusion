%YAML:1.0

#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 1
wheel: 1
only_initial_with_wheel: 0 #只利用wheel进行初始化，不加入因子图
plane: 1
num_of_cam: 1

imu_topic: "/carla/ego_vehicle/imu"
wheel_topic: "/carla/ego_vehicle/odometry" 
#TODO check the distortion
image0_topic: "/carla/ego_vehicle/camera_svc_front/image"

image_front_topic: "/carla/ego_vehicle/camera_svc_front/image"
image_left_topic: "/carla/ego_vehicle/camera_svc_left/image"
image_rear_topic: "/carla/ego_vehicle/camera_svc_rear/image"
image_right_topic: "/carla/ego_vehicle/camera_svc_right/image"

output_path: "/home/hugoliu/github/catkin_ws/src/VIW-Fusion/output"

cam0_calib: "camera_info_svc_front.yaml"  #/home/hugoliu/github/catkin_ws/src/VIW-Fusion/config/carla/
cam_front_calib: "camera_info_svc_front.yaml"
cam_left_calib: "camera_info_svc_front.yaml"
cam_rear_calib: "camera_info_svc_front.yaml"
cam_right_calib: "camera_info_svc_front.yaml"

image_width: 1920
image_height: 1080

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
  # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
# 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.
#If you choose 0 or 1, you should write down the following matrix.

extrinsic_type: 3 # 0 ALL
                  # 1 Only translation
                  # 2 Only Rotation
                  # 3 no z
                  # 4 no rotation and no z

body_T_cam0: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [ 0.0,  -0.3420,   0.9397,  2.58,
          -1.0,   0.0,      0.0,     0.0,
           0.0,  -0.9397,  -0.3420,  0.73,
           0,     0,        0,       1 ]

homo_svc_front: !!opencv-matrix
  rows: 3
  cols: 3
  dt: d
  data: [ 3.60844093e-02,  4.18046902e-01, -1.76052638e+02,
          0.00000000e+00,  1.14664231e+00, -4.09155178e+02,
          0.00000000e+00,  2.32248307e-03, -7.85620124e-01]

homo_svc_left: !!opencv-matrix
  rows: 3
  cols: 3
  dt: d
  data: [ 1.31928308e-16,  3.79293869e-01, -1.49586276e+02,
         -3.60844093e-02,  1.25042486e+00, -3.88336836e+02,
          7.68624004e-19,  2.32248307e-03, -7.85620124e-01]

homo_svc_rear: !!opencv-matrix
  rows: 3
  cols: 3
  dt: d
  data: [-3.60844093e-02,  4.18046902e-01, -1.06770572e+02,
         -4.41906564e-18,  1.36349735e+00, -4.39943040e+02,
          8.79697091e-35,  2.32248307e-03, -7.85620124e-01]

homo_svc_right: !!opencv-matrix
  rows: 3
  cols: 3
  dt: d
  data: [-1.17214522e-16,  4.56799935e-01, -1.33236935e+02,
          3.60844093e-02,  1.25042486e+00, -4.57618902e+02,
         -5.51954914e-19,  2.32248307e-03, -7.85620124e-01]

delay_svc_right: 0.0

# body_T_cam1: !!opencv-matrix
#    rows: 4
#    cols: 4
#    dt: d
#    data: [ 0.0,   0.0,   1.0,  0.041,
#            -1.0,   0.0,   0.0, 0.258,
#            0.0,  -1.0,   0.0,  0.544,
#            0,     0,     0,    1 ]


# Extrinsic parameter between IMU and Wheel.
estimate_wheel_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
# 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
# 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.
#If you choose 0 or 1, you should write down the following matrix.

extrinsic_type_wheel: 3 # 0 ALL
                        # 1 Only translation
                        # 2 Only Rotation
                        # 3 no z
                        # 4 no rotation and no z

#wheel to body
body_T_wheel: !!opencv-matrix
  rows: 4
  cols: 4
  dt: d
  data: [1, 0, 0, 0.0,
         0, 1, 0, 0.0,
         0, 0, 1, 0.0,
         0, 0, 0, 1]


#plane noise
#mono:0.01 stereo:0.005
roll_n: 0.01
#mono:0.01  stereo:0.005
pitch_n: 0.01
#mono:0.05 stereo:0.025
zpw_n: 0.05


#Multiple thread support
multiple_thread: 1

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.1         # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.05        # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 7.1765713730075628e-04         # accelerometer bias random work noise standard deviation.  #0.002
gyr_w: 4.0e-05       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.805         # gravity magnitude

#wheel parameters
# rad/s mono:0.004 stereo:0.002
wheel_gyro_noise_sigma: 0.01
#　m/s mono:0.01  stereo:0.006
wheel_velocity_noise_sigma: 0.05

estimate_wheel_intrinsic: 0
# 0  Have an accurate intrinsic parameters. We will trust the following sx, sy, sw, don't change it.
# 1  Have an initial guess about intrinsic parameters. We will optimize around your initial guess.
# 2  TODO Don't know anything about intrinsic parameters. You don't need to give sx, sy, sw. We will try to calibrate it. Do some rotation movement at beginning.
#If you choose 0 or 1, you should write down the following sx, sy, sw.
# wheel intrinsic
sx: 1.0
sy: 1.0
sw: 1.0


#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.00                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)
#unsynchronization parameters
estimate_td_wheel: 0                      # online estimate time offset between camera and wheel
td_wheel: 0.0                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)
#loop closure parameters
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/hugoliu/github/catkin_ws/src/VIW-Fusion/output/pose_graph" # save and load path
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
